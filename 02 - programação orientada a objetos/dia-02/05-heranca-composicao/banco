using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System;

namespace ExHerança

{
    public class App
    {
        static void Main()
        {
            List<ContaBase> contas = new List<ContaBase>();

            contas.Add(new ContaBase.ContaCorrente("Chris", "06"));
            contas.Add(new ContaBase.Poupanca("Daphnie", "13"));

            contas[0].Depositar(300);
            contas[1].Depositar(200);

            contas[0].Sacar(1000);
            contas[1].Sacar(24);

            for (int i = 0; i < contas.Count; i++)
            {
                contas[i].Resumo();
            }


        }
    }


    public class ContaBase

    {

        private string titular;

        private string numeroConta;

        protected decimal saldo;

        public ContaBase(string titular, string numeroConta)

        {

            this.titular = titular;

            this.numeroConta = numeroConta;

            this.saldo = 0;

        }

        public virtual void Transferir(ContaBase destino, decimal valor)
        {

        }

        public virtual void Depositar(decimal valor)

        {

            if (valor > 0)

            {

                saldo += valor;

            }

            else

            {

                Console.WriteLine("Valor dado é menor do que zero! Operação não foi feita.");

                return;

            }

        }

        public virtual void Sacar(decimal valor)

        {

            if (valor > 0 && saldo >= valor)

            {

                saldo -= valor;

            }

            else

            {

                Console.WriteLine("Valor dado é menor do que zero! Operação não foi feita.");

                return;

            }

        }

        public virtual void Resumo()

        {

            Console.WriteLine($"Número da conta: {numeroConta}\nNome titular: {titular}\n Saldo: {saldo:F2}\n");

        }

        public class ContaCorrente : ContaBase

        {

            private const decimal tarifaSaque = 1;

            public ContaCorrente(string titular, string numeroConta) : base(titular, numeroConta) { }

            public override void Sacar(decimal valor)

            {

                if (valor > 0 && saldo >= valor + tarifaSaque)

                {

                    saldo -= valor + tarifaSaque;

                }

                else

                {

                    Console.WriteLine("Valor dado é menor do que zero! Operação não foi feita.");

                    return;

                }

            }

        }

        public class Poupanca : ContaBase

        {

            private const decimal taxaRendimentoAnual = 0.08m;

            public Poupanca(string titular, string numeroConta) : base(titular, numeroConta) { }

            private void RenderJuros(int dias)

            {

                decimal rendimento = saldo * (taxaRendimentoAnual * dias / 365);

                base.Depositar(rendimento);

            }

        }

        public class ContaConjunta : ContaCorrente

        {

            private string segundoTitular;

            public ContaConjunta(string titular, string numeroConta, string segundoTitular) : base(titular, numeroConta)

            {

                this.segundoTitular = segundoTitular;

            }

            public override void Resumo()

            {

                Console.WriteLine($"Número da conta: {numeroConta}\nNome titular: {titular}\nNome segundo titular: {segundoTitular}\n {saldo:F2}\n");

            }

        }

    }

}



